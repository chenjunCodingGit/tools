1. 单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入
2. 双下划线开头的 __foo 代表类的私有成员，内部不被外部访问
3. 双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数
4. print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号
5. Python有五个标准的数据类型:
	Numbers（数字）
	String（字符串）
	List（列表）
	Tuple（元组）
	Dictionary（字典）
6. Python支持四种不同的数字类型：
	int（有符号整型）
	long（长整型[也可以代表八进制和十六进制]）
	float（浮点型）
	complex（复数）
7. Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
8. 元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表
9. Python2.x 里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。
10. is 与 == 区别：
	is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。
11. Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。
12. Python continue 语句跳出本次循环，而break跳出整个循环。
13. pass是空语句，是为了保持程序结构的完整性
14. 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组
15. 任意无符号的对象，以逗号隔开，默认为元组
16. 字典键的键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行
17. 在 python 中，类型属于对象，变量是没有类型的
18. 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。
	不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
	可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。
19. python 函数的参数传递：
	不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。
	可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响
20. 异常处理
	try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
	如果你不想在异常发生时结束你的程序，只需在try里捕获它。
21. 任何模块代码的第一个字符串都被视为模块的文档注释
22. 变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量
23. 把一个getter方法变成属性，只需要加上@property就可以
24. __str__()返回用户看到的字符串,__repr__()返回程序开发者看到的字符串
25. 通过callable()函数，我们就可以判断一个对象是否是“可调用”对象
26. metaclass 元类 当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例
27. 序列化为json 通常class的实例都有一个__dict__属性，它就是一个dict，用来存储实例变量。也有少数例外，比如定义了__slots__的class
28. 单进程的异步编程模型称为协程

